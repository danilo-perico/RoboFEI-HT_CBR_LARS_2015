#include <stdio.h>
#include <termio.h>
#include <unistd.h>
#include <dynamixel.h>
#include <time.h>
#include <sys/resource.h>
#include <sys/types.h>
#include <dirent.h>
#include <stdlib.h>
#include <termios.h>

// Defulat setting
#define DEFAULT_BAUDNUM		1 // 1Mbps
#define DEFAULT_ID1		1
#define DEFAULT_ID2		2
#define DEFAULT_ID4		4
#define DEFAULT_ID5		5
#define DEFAULT_ID6		6
#define DEFAULT_ID7		7
#define DEFAULT_ID8		8
#define DEFAULT_ID9		9
#define DEFAULT_ID10		10
#define DEFAULT_ID11		11
#define DEFAULT_ID12		12
#define DEFAULT_ID13		13
#define DEFAULT_ID14		14
#define DEFAULT_ID10		10
#define DEFAULT_ID15		15
#define DEFAULT_ID16		16
#define DEFAULT_ID17		17
#define DEFAULT_ID18		18
#define DEFAULT_ID19		19
#define DEFAULT_ID20		20

void PrintCommStatus(int CommStatus);
void PrintErrorCode(void);

int main()
{
         int i;
	 int baudnum = DEFAULT_BAUDNUM; //velocidade de transmissao
	 int index = 0;
	 int deviceIndex = 0; //endere√ßa USB
	 int Moving, PresentPos;
	 int CommStatus;
unsigned char string[50]; //String usada para definir prioridade do programa

    system("echo 123456 | sudo -S chmod 777 /dev/ttyUSB*");//libera USB

    sprintf(string,"echo 123456 | sudo -S renice -20 -p %d", getpid()); // prioridade maxima do codigo
    system(string);//prioridade

	printf( "\n\nRx-28 example for Linux\n\n" );
	// ---- Open USB2Dynamixel -----------------------------------------------{
	if( dxl_initialize(deviceIndex, baudnum) == 0 )
	{
		printf( "Failed to open USB2Dynamixel!\n" );
		printf( "Press Enter key to terminate...\n" );
		getchar();
		return 0;
	}
	else
		printf( "Succeed to open USB2Dynamixel!\n" );
//-----------------------------------------------------------------------------}
	while(1)
	{
		printf( "Press Enter key to continue!(press ESC and Enter to quit)\n" );
		if(getchar() == 0x1b)
			break;
//travar_servos();

//usleep(2000000);
robo_ereto();
usleep(3000000);
//virar_de_costas_deitado();

//int a;
//for(a=1; a<11; a++)
//andar_reto();

levantar();

//chutar_reto_direita();



		// Write goal position
		//for(i = 1;i<21;i++)
        //dxl_write_word( i, P_GOAL_POSITION_L, GoalPos[index] );
       //dxl_write_word( 3, 32, 0);//usleep(1000000);
		//			if( index == 0 )
			//			index = 1;
				//	else
//						index = 0;










	/*	do
		{
			// Read present position
			//for(i=1;i<11;i++)
			PresentPos = dxl_read_word( i, P_PRESENT_POSITION_L ); //usleep(1000000);
			CommStatus = dxl_get_result();

			if( CommStatus == COMM_RXSUCCESS )
			{
				printf( "%d   %d\n",GoalPos[index], PresentPos );
				PrintErrorCode();
			}
			else
			{
				PrintCommStatus(CommStatus);
				break;
			}
			// Check moving done
			//for(i=1;i<11;i++)
			Moving = dxl_read_byte( i, P_MOVING );
			CommStatus = dxl_get_result();

			if( CommStatus == COMM_RXSUCCESS )
			{
				if( Moving == 0 )
				{
					// Change goal position
					if( index == 0 )
						index = 1;
					else
						index = 0;
				}

				PrintErrorCode();
			}
			else
			{
				PrintCommStatus(CommStatus);
				break;
			}
		}while(Moving == 1);*/
		}
	//}
	// Close device
	dxl_terminate();
	printf( "Press Enter key to terminate...\n" );
	getchar();
	return 0;
}
// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
	{
	case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
		break;

	case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
		break;

	case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
		break;

	case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
		break;

	case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
		break;

	case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
		break;

	default:
		printf("This is unknown error code!\n");
		break;
	}
}

// Print error bit of status packet
void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
		printf("Input voltage error!\n");

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
		printf("Angle limit error!\n");

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
		printf("Overheat error!\n");

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
		printf("Out of range error!\n");

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
		printf("Checksum error!\n");

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
		printf("Overload error!\n");

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
		printf("Instruction code error!\n");
}


