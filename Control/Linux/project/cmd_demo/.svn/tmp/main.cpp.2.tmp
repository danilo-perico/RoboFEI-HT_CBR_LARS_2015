/*
 * main.cpp
 *
 *  Created on: 2011. 1. 4.
 *      Author: robotis
 */

#include <stdio.h>
#include <unistd.h>
#include <limits.h>
#include <string.h>
#include <libgen.h>

#include "mjpg_streamer.h"
#include "LinuxDARwIn.h"

#include "StatusCheck.h"
#include "VisionMode.h"

#ifdef MX28_1024
#define MOTION_FILE_PATH    "../../../Data/motion_1024.bin"
#else
#define MOTION_FILE_PATH    "../../../Data/motion_4096.bin"
#endif

#define INI_FILE_PATH       "../../../Data/config.ini"
#define M_INI	"walk_tuner.ini"
#define SCRIPT_FILE_PATH    "script.asc"

#define U2D_DEV_NAME0       "/dev/ttyUSB0"
#define U2D_DEV_NAME1       "/dev/ttyUSB1"

LinuxCM730 linux_cm730(U2D_DEV_NAME0);
CM730 cm730(&linux_cm730);
////////////////////////////////////////////
Action::PAGE Page;
Action::STEP Step;
////////////////////////////////////////////
void change_current_dir()
{
    char exepath[1024] = {0};
    if(readlink("/proc/self/exe", exepath, sizeof(exepath)) != -1)
        chdir(dirname(exepath));
}

int main(void)
{
		int trackerSel;    
		
		change_current_dir();

    minIni* ini = new minIni(INI_FILE_PATH);
    minIni* m_ini = new minIni(M_INI);
    Image* rgb_output = new Image(Camera::WIDTH, Camera::HEIGHT, Image::RGB_PIXEL_SIZE);
        
    LinuxCamera::GetInstance()->Initialize(0);
    LinuxCamera::GetInstance()->SetCameraSettings(CameraSettings());    // set default
    LinuxCamera::GetInstance()->LoadINISettings(ini);                   // load from ini

    mjpg_streamer* streamer = new mjpg_streamer(Camera::WIDTH, Camera::HEIGHT);

    BallTracker tracker = BallTracker();
    tracker.LoadINISettings(ini);
    httpd::ball_finder = &tracker.finder;
		trackerSel = 0;
    //PS3BallFollower follower = PS3BallFollower();

    ColorFinder* red_finder = new ColorFinder(0, 15, 45, 0, 0.3, 50.0);
    red_finder->LoadINISettings(ini, "RED");
    httpd::red_finder = red_finder;

    ColorFinder* yellow_finder = new ColorFinder(60, 15, 45, 0, 0.3, 50.0);
    yellow_finder->LoadINISettings(ini, "YELLOW");
    httpd::yellow_finder = yellow_finder;

    ColorFinder* blue_finder = new ColorFinder(225, 15, 45, 0, 0.3, 50.0);
    blue_finder->LoadINISettings(ini, "BLUE");
    httpd::blue_finder = blue_finder;

    httpd::ini = ini;

    //////////////////// Framework Initialize ////////////////////////////
    if(MotionManager::GetInstance()->Initialize(&cm730) == false)
    {
        linux_cm730.SetPortName(U2D_DEV_NAME1);
        if(MotionManager::GetInstance()->Initialize(&cm730) == false)
        {
            printf("Fail to initialize Motion Manager!\n");
            return 0;
        }
    }

    Walking::GetInstance()->LoadINISettings(ini);

    MotionManager::GetInstance()->AddModule((MotionModule*)Action::GetInstance());
    MotionManager::GetInstance()->AddModule((MotionModule*)Head::GetInstance());
    MotionManager::GetInstance()->AddModule((MotionModule*)Walking::GetInstance());
    //MotionManager::GetInstance()->StartThread();
    //LinuxMotionTimer::Initialize(MotionManager::GetInstance());
    LinuxMotionTimer::Initialize(MotionManager::GetInstance());
   /////////////////////////////////////////////////////////////////////

    int firm_ver = 0;
    if(cm730.ReadByte(JointData::ID_HEAD_PAN, MX28::P_VERSION, &firm_ver, 0)  != CM730::SUCCESS)
    {
        fprintf(stderr, "Can't read firmware version from Dynamixel ID %d!! \n\n", JointData::ID_HEAD_PAN);
        exit(0);
    }

    if(0 < firm_ver && firm_ver < 27)
    {
#ifdef MX28_1024
        Action::GetInstance()->LoadFile(MOTION_FILE_PATH);
#else
        fprintf(stderr, "MX-28's firmware is not support 4096 resolution!! \n");
        fprintf(stderr, "Upgrade MX-28's firmware to version 27(0x1B) or higher.\n\n");
        exit(0);
#endif
    }
    else if(27 <= firm_ver)
    {
#ifdef MX28_1024
        fprintf(stderr, "MX-28's firmware is not support 1024 resolution!! \n");
        fprintf(stderr, "Remove '#define MX28_1024' from 'MX28.h' file and rebuild.\n\n");
        exit(0);
#else
        Action::GetInstance()->LoadFile(MOTION_FILE_PATH);
#endif
    }
    else
        exit(0);

		//conversion! ////////////////
		/*
		Action::GetInstance()->LoadFile("../../../Data/motion.bin");
		int j,k,p,a;
		double f;		
		for(k=0;k<Action::MAXNUM_PAGE;k++)
			{
			Action::GetInstance()->LoadPage(k, &Page);
			for(j=0;j<Action::MAXNUM_STEP;j++)
				{
				for(p=0;p<31;p++)
					{
					a = Page.step[j].position[p];
					if(a < 1024)
						{
						f = ((a-512)*10)/3+2048;						
						a = (int)f;						
						if(a<0) a =0;
						if(a>4095) a = 4095;						
						Page.step[j].position[p] = a;						
						}						
					}				
				}
			Action::GetInstance()->SavePage(k, &Page);
			}
		exit(0);
		*/
		/////////////////////////////
/*
    Walking::GetInstance()->m_Joint.SetEnableBody(true,true);
    MotionManager::GetInstance()->SetEnable(true);

		Walking::GetInstance()->LoadINISettings(m_ini);                  

    cm730.WriteByte(CM730::P_LED_PANNEL, 0x01|0x02|0x04, NULL);

    PS3Controller_Start();
		LinuxActionScript::PlayMP3("../../../Data/mp3/ready.mp3");
    Action::GetInstance()->Start(15);
    while(Action::GetInstance()->IsRunning()) usleep(8*1000);
*/
    Walking::GetInstance()->m_Joint.SetEnableBody(false);
    Head::GetInstance()->m_Joint.SetEnableBody(false);
    Action::GetInstance()->m_Joint.SetEnableBody(true);
    MotionManager::GetInstance()->SetEnable(true);
		Walking::GetInstance()->LoadINISettings(m_ini);                  

    cm730.WriteByte(CM730::P_LED_PANNEL, 0x01|0x02|0x04, NULL);

    PS3Controller_Start();
		cm730.WriteWord(CM730::P_LED_HEAD_L, cm730.MakeColor(1,1,1),0);
		LinuxActionScript::PlayMP3("../../../Data/mp3/ready.mp3");
    Action::GetInstance()->Start(15);
    while(Action::GetInstance()->IsRunning()) usleep(8*1000);
    while(1)
    {
        StatusCheck::Check(cm730);

        Point2D ball_pos, red_pos, yellow_pos, blue_pos;

        LinuxCamera::GetInstance()->CaptureFrame();
        memcpy(rgb_output->m_ImageData, LinuxCamera::GetInstance()->fbuffer->m_RGBFrame->m_ImageData, 	LinuxCamera::GetInstance()->fbuffer->m_RGBFrame->m_ImageSize);

        if(StatusCheck::m_cur_mode == READY || StatusCheck::m_cur_mode == VISION)
        {
            ball_pos = tracker.finder.GetPosition(LinuxCamera::GetInstance()->fbuffer->m_HSVFrame);
            red_pos = red_finder->GetPosition(LinuxCamera::GetInstance()->fbuffer->m_HSVFrame);
            yellow_pos = yellow_finder->GetPosition(LinuxCamera::GetInstance()->fbuffer->m_HSVFrame);
            blue_pos = blue_finder->GetPosition(LinuxCamera::GetInstance()->fbuffer->m_HSVFrame);

			unsigned char r, g, b;
            for(int i = 0; i < rgb_output->m_NumberOfPixels; i++)
            {
				r = 0; g = 0; b = 0;				
                if(tracker.finder.m_result->m_ImageData[i] == 1)
                {
					r = 255;
                    g = 128;
					b = 0;
                }
                if(red_finder->m_result->m_ImageData[i] == 1)
                {
					if(tracker.finder.m_result->m_ImageData[i] == 1)
					{
						r = 0;
						g = 255;
						b = 0;
					}
					else
					{
						r = 255;
						g = 0;
						b = 0;
					}
                }
                if(yellow_finder->m_result->m_ImageData[i] == 1)
                {
					if(tracker.finder.m_result->m_ImageData[i] == 1)
					{
						r = 0;
						g = 255;
						b = 0;
					}
					else
					{
						r = 255;
						g = 255;
						b = 0;
					}
                }
                if(blue_finder->m_result->m_ImageData[i] == 1)
                {
                    if(tracker.finder.m_result->m_ImageData[i] == 1)
					{
						r = 0;
						g = 255;
						b = 0;
					}
					else
					{
						r = 0;
						g = 0;
						b = 255;
					}
                }

				if(r > 0 || g > 0 || b > 0)
				{
					rgb_output->m_ImageData[i * rgb_output->m_PixelSize + 0] = r;
					rgb_output->m_ImageData[i * rgb_output->m_PixelSize + 1] = g;
					rgb_output->m_ImageData[i * rgb_output->m_PixelSize + 2] = b;
				}
            }
        }
        else if(StatusCheck::m_cur_mode == SOCCER && PS3BallFollower::GetInstance()->bHeadAuto == true)
        {
            tracker.Process(LinuxCamera::GetInstance()->fbuffer->m_HSVFrame);

            for(int i = 0; i < rgb_output->m_NumberOfPixels; i++)
            {
                if(tracker.finder.m_result->m_ImageData[i] == 1)
                {
                    rgb_output->m_ImageData[i*rgb_output->m_PixelSize + 0] = 255;
                    rgb_output->m_ImageData[i*rgb_output->m_PixelSize + 1] = 128;
                    rgb_output->m_ImageData[i*rgb_output->m_PixelSize + 2] = 0;
                }
            }
        }

        streamer->send_image(rgb_output);

        if(StatusCheck::m_is_started == 0)
            continue;

        switch(StatusCheck::m_cur_mode)
        {
        case READY:
            break;
        case SOCCER:
					if(PS3.key.Right != 0) 
						{
						trackerSel++;
						if(trackerSel>3)  trackerSel = 0;
						switch(trackerSel)
							{
							case 0:
								tracker.LoadINISettings(ini);
								LinuxActionScript::PlayMP3("../../../Data/mp3/Red.mp3");
								break;								
							case 1:
								tracker.LoadINISettings(ini,"Yellow");
								LinuxActionScript::PlayMP3("../../../Data/mp3/Yellow.mp3");
								break;								
							case 2:
								tracker.LoadINISettings(ini,"Blue");
								LinuxActionScript::PlayMP3("../../../Data/mp3/Purple.mp3");
								break;								
							case 3:
								tracker.LoadINISettings(ini,"Red");
								LinuxActionScript::PlayMP3("../../../Data/mp3/Orange.mp3");
								break;								
							}							
						while(PS3.key.Right != 0) usleep(2000);
						}
 
					if(Action::GetInstance()->IsRunning() == 0 && PS3BallFollower::GetInstance()->bFullAuto == true)
						{
						Head::GetInstance()->m_Joint.SetEnableHeadOnly(true,true);
						Walking::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true,true);
						//Action::GetInstance()->m_Joint.SetEnableBody(false);

						PS3BallFollower::GetInstance()->Process(tracker.ball_position);
						int value;
						if(PS3BallFollower::GetInstance()->bTracking == true)
								{
								switch(trackerSel)
									{
									case 0://Red
										value = cm730.MakeColor(31,0,0);
										break;
									case 1://Yellow
										value = cm730.MakeColor(31,26,0);
										break;
									case 2://Purple
										value = cm730.MakeColor(31,0,24);
										break;
									case 3://Orange
										value = cm730.MakeColor(31,7,0);
										break;
									}
								}
						else
							value = cm730.MakeColor(1,1,1);
						if(PS3BallFollower::GetInstance()->bHeadAuto == false)
							value = cm730.MakeColor(0,8,0);
						cm730.WriteWordDelayed(CM730::P_LED_HEAD_L, value);
						if(PS3BallFollower::GetInstance()->KickBall != 0)
							{
							Head::GetInstance()->m_Joint.SetEnableHeadOnly(true,true);
							Walking::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true,true);
							//Action::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true);
							//int value = cm730.MakeColor(255,0,0);	
	    					//cm730.WriteWord(CM730::P_LED_EYE_L, value, 0);        
							if(PS3BallFollower::GetInstance()->bHeadAuto == true)
								{                
                Action::GetInstance()->m_Joint.SetEnableBodyWithoutHead(true, true);
								int m = (int)(3*((float)rand()/RAND_MAX));
								int n1;
								if(PS3BallFollower::GetInstance()->KickBall == -1)
									{
					 				if(m<2)
										n1 = 12;
									else
										n1 = 70; 
									Action::GetInstance()->Start(n1);   // 12 RIGHT KICK
									fprintf(stderr, "RightKick! \n");
									}
								else if(PS3BallFollower::GetInstance()->KickBall == 1)
									{
					 				if(m<2)
										n1 = 13;
									else
										n1 = 71; 
									Action::GetInstance()->Start(n1);   // 13 LEFT KICK
									fprintf(stderr, "LeftKick! \n");
									}
								//value = cm730.MakeColor(200,0,200);
								//cm730.WriteWord(CM730::P_LED_EYE_L, value, 0);        
								}								
							}
						}
            break;
        case MOTION:
            if(LinuxActionScript::m_is_running == 0)
                LinuxActionScript::ScriptStart(SCRIPT_FILE_PATH);
            break;
        case VISION:
            int detected_color = 0;
            detected_color |= (red_pos.X == -1)? 0 : VisionMode::RED;
            detected_color |= (yellow_pos.X == -1)? 0 : VisionMode::YELLOW;
            detected_color |= (blue_pos.X == -1)? 0 : VisionMode::BLUE;

            if(Action::GetInstance()->IsRunning() == 0)
                VisionMode::Play(detected_color);
            break;
        }
    }

    return 0;
}
